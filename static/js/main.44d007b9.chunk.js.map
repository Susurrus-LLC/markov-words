{"version":3,"sources":["components/page/page.module.sass","components/page/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Page","useState","input","setInput","min","setMin","max","setMax","num","setNum","text","setText","starters","setStarters","startersReady","setStartersReady","terminals","setTerminals","terminalsReady","setTerminalsReady","dictionary","setDictionary","dictionaryReady","setDictionaryReady","output","setOutput","useEffect","toLowerCase","split","filter","word","length","makeWords","choose","arr","Math","floor","random","generate","getLookup","slice","join","letter","next","lookup","hasOwnProperty","push","results","i","newStart","newTerm","newDict","j","build","className","styles","main","id","textInput","name","placeholder","value","onChange","e","target","options","type","onClick","result","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.44d007b9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"page_text__XIgGK\",\"options\":\"page_options__3GR25\",\"generate\":\"page_generate__LKcz8\",\"results\":\"page_results__2r7BQ\",\"num\":\"page_num__30fz7\"};","import React, { useState, useEffect } from 'react'\r\nimport styles from './page.module.sass'\r\n\r\nconst Page: React.FC = () => {\r\n  interface Terminals {\r\n    [propName: string]: boolean\r\n  }\r\n\r\n  interface Dictionary {\r\n    [propName: string]: string[]\r\n  }\r\n\r\n  const [input, setInput] = useState('')\r\n  const [min, setMin] = useState(3)\r\n  const [max, setMax] = useState(10)\r\n  const [num, setNum] = useState(100)\r\n  const [text, setText] = useState<string[]>([])\r\n  const [starters, setStarters] = useState<string[]>([])\r\n  const [startersReady, setStartersReady] = useState(false)\r\n  const [terminals, setTerminals] = useState<Terminals>({})\r\n  const [terminalsReady, setTerminalsReady] = useState(false)\r\n  const [dictionary, setDictionary] = useState<Dictionary>({})\r\n  const [dictionaryReady, setDictionaryReady] = useState(false)\r\n  const [output, setOutput] = useState('')\r\n\r\n  useEffect(() => {\r\n    setText(\r\n      input\r\n        .toLowerCase() // make everything lowercase\r\n        .split(/[\\n .\"“”‘’,/#!$#%@^&*;:{}–—=_`~[\\]()0-9]/) // split the input based on any punctuation (except ' and -), line breaks, spaces, or numbers\r\n        .filter(word => word.length > 0) // strip out any empty 'words'\r\n    )\r\n\r\n    // flag that the data needs to be rebuilt\r\n    setStartersReady(false)\r\n    setTerminalsReady(false)\r\n    setDictionaryReady(false)\r\n  }, [input])\r\n\r\n  useEffect(() => {\r\n    // when the data is built, trigger generation\r\n    if (startersReady && terminalsReady && dictionaryReady) {\r\n      makeWords()\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [startersReady, terminalsReady, dictionaryReady])\r\n\r\n  // make a random choice, given options\r\n  const choose = (arr: string[]) => arr[Math.floor(arr.length * Math.random())]\r\n\r\n  const build = (): void => {\r\n    // if the input has changed,\r\n    if (!startersReady || !terminalsReady || !dictionaryReady) {\r\n      let newStart: string[] = []\r\n      let newTerm: Terminals = {}\r\n      let newDict: Dictionary = {}\r\n\r\n      // build the dictionary, terminals, and starters\r\n      for (let i = 0; i < text.length; i++) {\r\n        // grab the word and split it into an array of letters\r\n        const word = text[i].split('')\r\n\r\n        // add the word-initial letter pair to the list of possible starters\r\n        newStart.push(word.slice(0, 2).join(''))\r\n\r\n        // add the word-final letter pair to the list of possible terminals\r\n        newTerm[word.slice(-2).join('')] = true\r\n\r\n        // build the dictionary and stats\r\n        for (let j = 0; j < word.length - 1; j++) {\r\n          // add lookups for single letters\r\n          if (newDict.hasOwnProperty(word[j])) {\r\n            // if the letter is already in the dictionary, add its following letter\r\n            newDict[word[j]].push(word[j + 1])\r\n          } else {\r\n            // otherwise, add the letter and its following letter\r\n            newDict[word[j]] = [word[j + 1]]\r\n          }\r\n\r\n          // add lookups for paired letters after reaching the second letter\r\n          if (j > 0) {\r\n            if (newDict.hasOwnProperty(word[j - 1] + word[j])) {\r\n              // if the letter pair is already in the dictionary, add its following letter\r\n              newDict[word[j - 1] + word[j]].push(word[j + 1])\r\n            } else {\r\n              // otherwise, add the letter pair and its following letter\r\n              newDict[word[j - 1] + word[j]] = [word[j + 1]]\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      setStarters([...newStart])\r\n      setTerminals({ ...newTerm })\r\n      setDictionary({ ...newDict })\r\n    }\r\n\r\n    // trigger generation with useEffect\r\n    setStartersReady(true)\r\n    setTerminalsReady(true)\r\n    setDictionaryReady(true)\r\n  }\r\n\r\n  const generate = (min: number): string => {\r\n    // grab the last letter(s) of the word for lookup\r\n    const getLookup = (word: string[]) => {\r\n      return word.length < 2 ? word[word.length - 1] : word.slice(-2).join('')\r\n    }\r\n\r\n    // start with starter letters\r\n    let letter = choose(starters)\r\n    let next = letter.split('')\r\n    let word = next\r\n    let lookup = getLookup(word)\r\n\r\n    while (dictionary.hasOwnProperty(lookup)) {\r\n      // choose the next letter and add it to the word\r\n      next = dictionary[lookup]\r\n      letter = choose(next)\r\n      word.push(letter)\r\n      lookup = getLookup(word)\r\n\r\n      // if the word is long enough and the current letter is a terminal, end the loop\r\n      if (word.length >= min && terminals.hasOwnProperty(lookup)) {\r\n        break\r\n      }\r\n    }\r\n\r\n    // if the word isn't long enough, try again\r\n    if (word.length < min) {\r\n      return generate(min)\r\n    } else {\r\n      return word.join('')\r\n    }\r\n  }\r\n\r\n  const makeWords = (): void => {\r\n    if (!startersReady || !terminalsReady || !dictionaryReady) {\r\n      // if the data needs to be built, build it\r\n      build()\r\n    } else {\r\n      // if the data is built, generate the output\r\n      let results = []\r\n\r\n      // if the minimum length is greater than the maximum, display an error\r\n      if (min > max) {\r\n        results.push('Maximum length must be greater or equal to minimum length.')\r\n      } else if (text.length === 0) {\r\n        results.push('No input provided.')\r\n      } else if (starters.length === 0 || starters[0] === '') {\r\n        results.push('Internal error.')\r\n      } else {\r\n        // randomize the length of the words between the min and the max\r\n        for (let i = 0; i < num; i++) {\r\n          const length = min + Math.floor((max + 1 - min) * Math.random())\r\n          results.push(generate(length))\r\n        }\r\n      }\r\n\r\n      setOutput(results.join(' '))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <main className={styles.main}>\r\n      <textarea\r\n        id={styles.textInput}\r\n        className={styles.text}\r\n        name='text input'\r\n        placeholder='Enter as many words as you can. The more the better.'\r\n        value={input}\r\n        onChange={e => setInput(e.target.value)}\r\n      />\r\n      <div id={styles.options} className={styles.options}>\r\n        <label>\r\n          minimum length:{' '}\r\n          <input\r\n            id={styles.min}\r\n            className={styles.num}\r\n            name='minimum length'\r\n            type='number'\r\n            min='1'\r\n            max='10'\r\n            value={min}\r\n            onChange={e => setMin(+e.target.value)}\r\n          />\r\n        </label>\r\n        <label>\r\n          maximum length:{' '}\r\n          <input\r\n            id={styles.max}\r\n            className={styles.num}\r\n            name='maximum length'\r\n            type='number'\r\n            min='3'\r\n            max='20'\r\n            value={max}\r\n            onChange={e => setMax(+e.target.value)}\r\n          />\r\n        </label>\r\n        <label>\r\n          number of words:{' '}\r\n          <input\r\n            id={styles.num}\r\n            className={styles.num}\r\n            name='number of words'\r\n            type='number'\r\n            min='1'\r\n            max='9999'\r\n            value={num}\r\n            onChange={e => setNum(+e.target.value)}\r\n          />\r\n        </label>\r\n      </div>\r\n      <button\r\n        id={styles.generate}\r\n        className={styles.generate}\r\n        name='generate'\r\n        onClick={makeWords}\r\n      >\r\n        Generate\r\n      </button>\r\n      <div className={styles.results}>\r\n        <p className={styles.result}>{output}</p>\r\n      </div>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Page\r\n","import React from 'react'\nimport 'normalize.css'\nimport '@fortawesome/fontawesome-free/css/all.css'\n\nimport Page from './components/page'\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <header className='header' />\n      <Page />\n      <footer className='footer' />\n    </>\n  )\n}\n\nexport default App\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './global.sass'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.register()\n"],"sourceRoot":""}